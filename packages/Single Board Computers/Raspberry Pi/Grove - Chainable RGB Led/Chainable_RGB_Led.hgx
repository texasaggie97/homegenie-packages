<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>Program.AddOption("LedsCount", "1", "Number of chained RGB leds", "text");
Program.Run();
</ScriptCondition>
  <ScriptSource>// Domain
string appDomain = "HomeAutomation.GroveRGB";
// Params
int ledsCount = (int)Program.Option("LedsCount").DecimalValue;
// Grove RGB modules
var rgbModules = Modules.InDomain(appDomain);
// Grove RGB Led GPIO settings
var driver = new FileGpioConnectionDriver();
var gpioOut1 = new GpioOutputBinaryPin(driver, ConnectorPin.P1Pin13.ToProcessor());
var gpioOut2 = new GpioOutputBinaryPin(driver, ConnectorPin.P1Pin07.ToProcessor());
var groveRgb = new GroveRgbConnection(gpioOut1, gpioOut2, ledsCount);
// Allocate virtual modules for this app
Program.AddVirtualModules(appDomain, "Dimmer", "homegenie/generic/colorlight", 1, ledsCount);

double defaultDelay = 100;
var instlock = new ManualResetEvent[ledsCount];
var syncher = new object();

var GetHsb = new Func&lt;string,dynamic&gt;((hsb)=&gt;{
  dynamic color = new ExpandoObject();
  string[] parts = hsb.Split(',');
  color.H = double.Parse(parts[0] != "" ? parts[0] : "1");
  color.S = double.Parse(parts.Length &gt; 1 &amp;&amp; parts[1] != "" ? parts[1] : "0");
  color.B = double.Parse(parts.Length &gt; 2 &amp;&amp; parts[2] != "" ? parts[2] : "1");
  return color;
});

var GetValueAt = new Func&lt;double,double,double,double,double&gt;((from, to, duration, offset)=&gt;{
  double range = (to-from);
  return from+(range/duration*offset);
});

var setColor = new Func&lt;int,dynamic,double,bool&gt;((lednumber, color, duration)=&gt;{
  var module = rgbModules.WithAddress((lednumber+1).ToString()).Get();
  if (instlock[lednumber] == null)
    instlock[lednumber] = new ManualResetEvent(true);
  instlock[lednumber].WaitOne(500);
  instlock[lednumber].Reset();
  {
    var t = new Thread(()=&gt;{

      var currentColor = GetHsb(module.Parameter("Status.ColorHsb").Value);
      var stopwatch = new System.Diagnostics.Stopwatch();
      stopwatch.Start();
      try 
      {
        do
        {
          lock(syncher)
          {
            if (stopwatch.Elapsed.TotalMilliseconds &lt;= duration) 
            {
              var h = GetValueAt(currentColor.H, color.H, duration, stopwatch.Elapsed.TotalMilliseconds);
              var s = GetValueAt(currentColor.S, color.S, duration, stopwatch.Elapsed.TotalMilliseconds);
              var v = GetValueAt(currentColor.B, color.B, duration, stopwatch.Elapsed.TotalMilliseconds);
              groveRgb.SetColor(lednumber, RgbColor.FromHsv(h, s, v));
            }
            else 
            {
              groveRgb.SetColor(lednumber, RgbColor.FromHsv(color.H, color.S, color.B));
              Pause(0.010);
              break;
            }
          }
          Pause(0.010);
        } while (true);
      }
      catch {}
      instlock[lednumber].Set();
    });
    t.Start();
  }
  //t.Join();
  return true;
});

// Initialize modules
for(int x = 0; x &lt; ledsCount; x++)
{
  var module = rgbModules.WithAddress((x+1).ToString()).Get();
  if (module.Parameter("Status.ColorHsb").Value == "")
  {
    module.Parameter("Status.ColorHsb").Value = "1,0,1";
  }
  var currentColor = GetHsb(module.Parameter("Status.ColorHsb").Value);
  if (module.Parameter("Status.Level").DecimalValue == 0)
  {
    currentColor.B = 0d;
  }
  setColor(x, currentColor, defaultDelay);
}

// Release GPIO driver if app is being stopped
When.ProgramStopping(()=&gt;{
  ((IDisposable)groveRgb).Dispose();
  return true;
});

// API calls handling
When.WebServiceCallReceived(appDomain, ( args ) =&gt; {
  var apiCall = Program.ParseApiCall(args.ToString());
  try
  {
    string lightnumber = apiCall.Address;
    var module = rgbModules.WithAddress(lightnumber).Get();
    int lightId = int.Parse(lightnumber) - 1;
    var currentColor = GetHsb(module.Parameter("Status.ColorHsb").Value);
    switch(apiCall.Command)
    {
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.GroveRGB/&lt;light_number&gt;/Control.On
      case "Control.On":
        setColor(lightId, currentColor, 0);
        Program.RaiseEvent(module, "Status.Level", currentColor.B.ToString(), "Groove RGB Led");
        Program.RaiseEvent(module, "Status.ColorHsb", module.Parameter("Status.ColorHsb").Value, "Color Light");
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.GroveRGB/&lt;light_number&gt;/Control.Off
      case "Control.Off":
        currentColor.B = 0d;
        setColor(lightId, currentColor, defaultDelay);
        Program.RaiseEvent(module, "Status.Level", "0", "Groove RGB Led");
        break;
      case "Control.Toggle":
        if (module.Parameter("Status.Level").DecimalValue == 0)
        {
          setColor(lightId, currentColor, 0);
          Program.RaiseEvent(module, "Status.Level", currentColor.B.ToString(), "Groove RGB Led");
          Program.RaiseEvent(module, "Status.ColorHsb", module.Parameter("Status.ColorHsb").Value, "Color Light");
        }
        else
        {
          currentColor.B = 0d;
          setColor(lightId, currentColor, defaultDelay);
          Program.RaiseEvent(module, "Status.Level", "0", "Groove RGB Led");
        }
        break;
      case "Control.Level":
        double level = (double.Parse(apiCall.GetOption(0)) / 100D);
        currentColor.B = level;
        setColor(lightId, currentColor, defaultDelay);
        Program.RaiseEvent(module, "Status.Level", level.ToString(), "Groove RGB Led");
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.PhilipsHue/&lt;light_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
      case "Control.ColorHsb":
        string[] values = apiCall.GetOption(0).Split(',');
        double transition = defaultDelay;
        if (values.Length &gt; 3) transition = ((int)(double.Parse(values[3]) * 1000)); 
        var color = GetHsb(apiCall.GetOption(0));
        setColor(lightId, color, transition);
        Program.RaiseEvent(module, "Status.Level", color.B.ToString(), "Groove RGB Led");
        Program.RaiseEvent(module, "Status.ColorHsb", apiCall.GetOption(0), "Color Light");
        break; 
    }
    return new ResponseText("OK");
  } 
  catch (Exception e) 
  { 
    Program.Notify("Grove RGB ERROR!", e.Message);
  }
  return new ResponseText("ERROR");
}); 


Program.GoBackground();</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>62</Address>
  <Name>Grove - Chainable RGB Led</Name>
  <Description>Chainable RGB color leds modules wired to GPIO#4 and GPIO#21/27 (power with 3v3).
http://www.seeedstudio.com/wiki/Grove_-_Chainable_RGB_LED</Description>
  <Group>Raspberry Pi</Group>
  <Features />
  <ActivationTime>2016-11-26T13:55:19.56752Z</ActivationTime>
  <TriggerTime>2016-11-26T13:55:20.056705Z</TriggerTime>
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>